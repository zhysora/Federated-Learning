import pickle
import uuid

import msgpack
import random
import codecs
import numpy as np
import json
import msgpack_numpy
# https://github.com/lebedov/msgpack-numpy

import sys
import time
import datasource

from flask import *
from flask_socketio import SocketIO
from flask_socketio import *
# https://flask-socketio.readthedocs.io/en/latest/
       
time_max = 5000 

def prim(arr):
    a = arr[0][0]
    b = arr[0][1]
    for i in range(len(arr)):
        arr[i][0] = arr[i][0] - a
        arr[i][1] = arr[i][1] - b
        if arr[i][1] > time_max:
            arr[i] = arr[i - 1]

class GlobalModel(object): # 全局模型
    """docstring for GlobalModel"""
    def __init__(self): # 初始化
      
        # all rounds; losses[i] = [round#, timestamp, loss]
        # round# could be None if not applicable

        self.test_losses_async_idd_1 = [[0, 594, 0.2683725786685944], [1, 796, 0.1646950255036354], [2, 954, 0.1400919909119606], [3, 1131, 0.12428093261122704], [4, 1287, 0.13224848151803018], [5, 1456, 0.1089596280593425], [6, 1666, 0.10049372465535998], [7, 1822, 0.11244489689115435], [8, 1978, 0.11609167094994337], [9, 2198, 0.112249707942456], [10, 2422, 0.11885863844309934], [11, 2649, 0.11958112002648413], [12, 2882, 0.1132988657031674], [13, 3103, 0.1131258396003861], [14, 3345, 0.1248910959591507], [15, 3511, 0.1367309525823919], [16, 3668, 0.11363893987784977], [17, 3913, 0.11521794287681696], [18, 4103, 0.12253456195334148], [19, 4301, 0.12743683743771397], [20, 4497, 0.1263455372966884], [21, 4716, 0.12535538386022962], [22, 4889, 0.13214390195373707], [23, 5067, 0.1454433604212507], [24, 5262, 0.13906921324538343], [25, 5482, 0.13563010996786543], [26, 5655, 0.14388266558786528], [27, 5831, 0.14829864716614574], [28, 6041, 0.15085799638452407], [29, 6257, 0.13852812039139245], [30, 6469, 0.13874515094534146], [31, 6703, 0.1444812315390831], [32, 6902, 0.15232892853463126], [33, 7077, 0.1514032882661875], [34, 7309, 0.14658020430394572], [35, 7492, 0.14118265412100592], [36, 7698, 0.16552440520925019], [37, 7908, 0.16137774413007974], [38, 8085, 0.15696104720102466], [39, 8254, 0.16462414144369222], [40, 8505, 0.16968297845115585], [41, 8682, 0.15356598898363527], [42, 8866, 0.16103247505528454], [43, 9085, 0.13971731145847116], [44, 9306, 0.15374068765641952], [45, 9550, 0.15384966451183363], [46, 9780, 0.14945953776986734], [47, 9987, 0.15832853028881436], [48, 10167, 0.16035932858909083], [49, 10389, 0.15620872967673693], [50, 10566, 0.1565206462982629], [51, 10799, 0.16326922155567336], [52, 11040, 0.1596139474472382], [53, 11293, 0.16583738441391216], [54, 11640, 0.15243660915773424]]
        self.test_accuracies_async_idd_1 = [[0, 594, 0.9188], [1, 796, 0.952], [2, 954, 0.9596], [3, 1131, 0.961], [4, 1287, 0.9592], [5, 1456, 0.9684], [6, 1666, 0.9688], [7, 1822, 0.9686], [8, 1978, 0.9676], [9, 2198, 0.9702], [10, 2422, 0.9718], [11, 2649, 0.9706], [12, 2882, 0.9714], [13, 3103, 0.9728], [14, 3345, 0.9724], [15, 3511, 0.9722], [16, 3668, 0.9744], [17, 3913, 0.9748], [18, 4103, 0.9742], [19, 4301, 0.9736], [20, 4497, 0.9734], [21, 4716, 0.9758], [22, 4889, 0.9738], [23, 5067, 0.9724], [24, 5262, 0.9734], [25, 5482, 0.9746], [26, 5655, 0.9756], [27, 5831, 0.9758], [28, 6041, 0.9724], [29, 6257, 0.9744], [30, 6469, 0.9738], [31, 6703, 0.9754], [32, 6902, 0.9732], [33, 7077, 0.9738], [34, 7309, 0.9742], [35, 7492, 0.975], [36, 7698, 0.975], [37, 7908, 0.971], [38, 8085, 0.9746], [39, 8254, 0.9746], [40, 8505, 0.974], [41, 8682, 0.9744], [42, 8866, 0.9728], [43, 9085, 0.9764], [44, 9306, 0.975], [45, 9550, 0.9748], [46, 9780, 0.977], [47, 9987, 0.9754], [48, 10167, 0.9756], [49, 10389, 0.977], [50, 10566, 0.976], [51, 10799, 0.9746], [52, 11040, 0.9748], [53, 11293, 0.9736], [54, 11640, 0.975]]
        prim(self.test_losses_async_idd_1)
        prim(self.test_accuracies_async_idd_1)

        self.test_losses_async_idd_2 = [[0, 3129, 0.6780492142677307], [2, 3323, 0.39684067430496217], [4, 3533, 0.22598648948073388], [6, 3762, 0.16162148419618608], [8, 3963, 0.15844887227118015], [10, 4177, 0.14407180500924588], [12, 4400, 0.1365970572784543], [14, 4615, 0.10926666255146265], [16, 4796, 0.12075072261467576], [18, 5022, 0.11045621878243983], [20, 5262, 0.09908397149071098], [22, 5499, 0.11020064030229114], [24, 5748, 0.10078261169428006], [26, 5979, 0.10431153459874913], [28, 6208, 0.10180362592129968], [30, 6450, 0.0987786814483814], [32, 6648, 0.08944727842425927], [34, 6864, 0.10828737477997784], [36, 7114, 0.09850992200644687], [38, 7358, 0.097785290153604], [40, 7608, 0.0946130341053009], [42, 7848, 0.09870235056186794], [44, 8096, 0.09705481237380299], [46, 8354, 0.10374347937769489], [48, 8596, 0.09971174648884917], [50, 8811, 0.11563717832835245], [52, 9068, 0.10154524490721815], [54, 9324, 0.10642807309874043], [56, 9583, 0.0997289058014634], [58, 9801, 0.10634537193253345], [60, 10047, 0.12852197401542362], [62, 10292, 0.11596043653495544], [64, 10470, 0.12180904591414655], [66, 10707, 0.11555612826577707], [68, 10929, 0.10849039230938542], [70, 11174, 0.1235192516814559], [72, 11406, 0.11780265048104593], [74, 11635, 0.10821288595324367], [76, 11888, 0.12005666754170297], [78, 12122, 0.12263126394324518], [80, 12382, 0.11502926321876948], [82, 12642, 0.10614074564654256], [84, 12908, 0.10097398891259654], [86, 13143, 0.11477563844335772], [88, 13390, 0.11899253455188263], [90, 13589, 0.11654633564835194], [92, 13854, 0.12109534841731384], [94, 14096, 0.1265651935179825], [96, 14363, 0.12273593526664217], [98, 14616, 0.12733458015394955], [100, 14841, 0.1426794840896674], [102, 15077, 0.1335873653055696], [104, 15292, 0.12488252072453124], [106, 15547, 0.12486903359761545]]
        self.test_accuracies_async_idd_2 = [[0, 3129, 0.7884], [2, 3323, 0.8682], [4, 3533, 0.9258], [6, 3762, 0.9478], [8, 3963, 0.9516], [10, 4177, 0.956], [12, 4400, 0.9574], [14, 4615, 0.9634], [16, 4796, 0.9604], [18, 5022, 0.9652], [20, 5262, 0.9694], [22, 5499, 0.9678], [24, 5748, 0.9698], [26, 5979, 0.9696], [28, 6208, 0.9726], [30, 6450, 0.9726], [32, 6648, 0.974], [34, 6864, 0.9706], [36, 7114, 0.9724], [38, 7358, 0.9744], [40, 7608, 0.975], [42, 7848, 0.9758], [44, 8096, 0.9746], [46, 8354, 0.974], [48, 8596, 0.9764], [50, 8811, 0.9726], [52, 9068, 0.9764], [54, 9324, 0.9776], [56, 9583, 0.9774], [58, 9801, 0.9758], [60, 10047, 0.9718], [62, 10292, 0.9742], [64, 10470, 0.973], [66, 10707, 0.9738], [68, 10929, 0.9782], [70, 11174, 0.9754], [72, 11406, 0.977], [74, 11635, 0.9768], [76, 11888, 0.9766], [78, 12122, 0.9776], [80, 12382, 0.9778], [82, 12642, 0.9788], [84, 12908, 0.9782], [86, 13143, 0.9774], [88, 13390, 0.977], [90, 13589, 0.9778], [92, 13854, 0.976], [94, 14096, 0.9746], [96, 14363, 0.9758], [98, 14616, 0.976], [100, 14841, 0.9736], [102, 15077, 0.9742], [104, 15292, 0.9772], [106, 15547, 0.9774]]
        prim(self.test_losses_async_idd_2)
        prim(self.test_accuracies_async_idd_2)

        self.test_losses_sync_idd_2 = [[2, 3091, 1.0191556999206544], [4, 3300, 0.7904293834686279], [6, 3495, 0.24917737085819244], [8, 3695, 0.20133179590702058], [10, 3876, 0.14969689297676086], [12, 4099, 0.12632816101312638], [14, 4285, 0.11721628018021583], [16, 4470, 0.11264137083888054], [18, 4662, 0.10360353882908821], [20, 4881, 0.09509979426413774], [22, 5123, 0.2158733239352703], [24, 5313, 0.15702776735574006], [26, 5504, 0.14210167639255525], [28, 5709, 0.12065750823169946], [30, 5865, 0.11408636444807052], [32, 6079, 0.12572765446305276], [34, 6313, 0.1146194363489747], [36, 6474, 0.10618003001846373], [38, 6668, 0.0818922513294965], [40, 6843, 0.07641051913648844], [42, 7034, 0.0921101241884753], [44, 7273, 0.09299673136826604], [46, 7501, 0.09600682008396834], [48, 7721, 0.09385300213266164], [50, 7945, 0.0979293489208445], [52, 8109, 0.08705107566369698], [54, 8325, 0.08912533307936973], [56, 8520, 0.08842812694772147], [58, 8719, 0.09729657063381747], [60, 8963, 0.09298586309738457], [62, 9132, 0.08890923702635337], [64, 9319, 0.08945739485474768], [66, 9510, 0.09959847715026698], [68, 9749, 0.09871191894507501], [70, 9938, 0.10241007969408529], [72, 10179, 0.0923429535630159], [74, 10336, 0.08903333224821836], [76, 10556, 0.08353838232813869], [78, 10806, 0.08225425045540323], [80, 11007, 0.08110950103421928], [82, 11168, 0.08089868939178996], [84, 11353, 0.09116511777709238], [86, 11587, 0.09034211277231224], [88, 11787, 0.08293952608502005], [90, 11965, 0.08365805867641465], [92, 12202, 0.08432956848692848], [94, 12403, 0.08499812247848604], [96, 12669, 0.08063345431889174], [98, 12928, 0.08899529541511729], [100, 13129, 0.11168654677017475], [102, 13313, 0.11092511909653112], [104, 13546, 0.10256703009246848], [106, 13767, 0.07957964032542077], [108, 13988, 0.09509332215264003], [110, 14239, 0.10320079660189221], [112, 14480, 0.1012103152552605]]
        self.test_accuracies_sync_idd_2 = [[2, 3091, 0.7438], [4, 3300, 0.7648], [6, 3495, 0.912], [8, 3695, 0.9338], [10, 3876, 0.9472], [12, 4099, 0.957], [14, 4285, 0.9592], [16, 4470, 0.963], [18, 4662, 0.9648], [20, 4881, 0.9676], [22, 5123, 0.9334], [24, 5313, 0.9518], [26, 5504, 0.9538], [28, 5709, 0.9598], [30, 5865, 0.964], [32, 6079, 0.9564], [34, 6313, 0.9628], [36, 6474, 0.9678], [38, 6668, 0.9734], [40, 6843, 0.9748], [42, 7034, 0.9712], [44, 7273, 0.9732], [46, 7501, 0.971], [48, 7721, 0.972], [50, 7945, 0.9702], [52, 8109, 0.9744], [54, 8325, 0.9748], [56, 8520, 0.9748], [58, 8719, 0.9722], [60, 8963, 0.9754], [62, 9132, 0.9756], [64, 9319, 0.9774], [66, 9510, 0.9746], [68, 9749, 0.9746], [70, 9938, 0.9734], [72, 10179, 0.9756], [74, 10336, 0.9768], [76, 10556, 0.9766], [78, 10806, 0.976], [80, 11007, 0.9784], [82, 11168, 0.9772], [84, 11353, 0.9778], [86, 11587, 0.9782], [88, 11787, 0.9786], [90, 11965, 0.9774], [92, 12202, 0.9786], [94, 12403, 0.979], [96, 12669, 0.9776], [98, 12928, 0.9766], [100, 13129, 0.975], [102, 13313, 0.975], [104, 13546, 0.9782], [106, 13767, 0.9792], [108, 13988, 0.9774], [110, 14239, 0.9766], [112, 14480, 0.9778]]
        prim(self.test_losses_sync_idd_2)
        prim(self.test_accuracies_sync_idd_2)

        self.test_losses_async_idd_4 = [[4, 912, 0.649210481262207], [8, 1131, 0.22393714466094972], [12, 1379, 0.1556392345905304], [16, 1617, 0.1341833856523037], [20, 1809, 0.12492549591362476], [24, 2013, 0.10962133630812168], [28, 2232, 0.10300094564855099], [32, 2426, 0.09507146451026201], [36, 2628, 0.0918072822585702], [40, 2866, 0.08780999610126018], [44, 3072, 0.08619685701578855], [48, 3243, 0.0820971983961761], [52, 3497, 0.08045667474716901], [56, 3690, 0.07726395923420787], [60, 3900, 0.07474359226748348], [64, 4134, 0.07360985533893108], [68, 4400, 0.07430568934120238], [72, 4586, 0.07447400654144586], [76, 4770, 0.07014513890799134], [80, 5023, 0.07215823887977749], [84, 5277, 0.06917216835469008], [88, 5476, 0.07168877988047898], [92, 5692, 0.06815193363865837], [96, 5910, 0.06586460809167474], [100, 6120, 0.06651870095264166], [104, 6325, 0.06583957575839013], [108, 6542, 0.06777686707070098], [112, 6814, 0.0644760595374275], [116, 7047, 0.06341306758793071], [120, 7271, 0.0642226505544968], [124, 7493, 0.06229651925410144], [128, 7741, 0.06346529453010298], [132, 7944, 0.06157003774913028], [136, 8153, 0.0635293107189238], [140, 8346, 0.06396110605709254], [144, 8575, 0.06385181804639287], [148, 8825, 0.06089078501276672], [152, 9021, 0.06478819372814615], [156, 9256, 0.0651467125231633], [160, 9467, 0.06354831490530632], [164, 9699, 0.06553382516077254], [168, 9967, 0.06697258037154097], [172, 10232, 0.0643235170817934], [176, 10487, 0.06441097136570606], [180, 10691, 0.06604790080206004], [184, 10946, 0.06641588236336829], [188, 11192, 0.06907037285480183], [192, 11435, 0.06499466781787341], [196, 11656, 0.07094957812594949], [200, 11842, 0.06463069215933792], [204, 12099, 0.0643334688030067], [208, 12325, 0.06557620825077756], [212, 12591, 0.06809887662563706], [216, 12857, 0.06960092083910131], [220, 13099, 0.06645247171297669], [224, 13460, 0.06233398903479683], [228, 13937, 0.0641279132306343], [232, 14894, 0.06034196027412545]]
        self.test_accuracies_async_idd_4 = [[4, 912, 0.9246], [8, 1131, 0.9476], [12, 1379, 0.9574], [16, 1617, 0.9608], [20, 1809, 0.9642], [24, 2013, 0.968], [28, 2232, 0.9688], [32, 2426, 0.9716], [36, 2628, 0.9746], [40, 2866, 0.974], [44, 3072, 0.974], [48, 3243, 0.9762], [52, 3497, 0.9754], [56, 3690, 0.9774], [60, 3900, 0.9772], [64, 4134, 0.9778], [68, 4400, 0.9786], [72, 4586, 0.9786], [76, 4770, 0.9804], [80, 5023, 0.9808], [84, 5277, 0.9818], [88, 5476, 0.9806], [92, 5692, 0.9804], [96, 5910, 0.9816], [100, 6120, 0.9814], [104, 6325, 0.9816], [108, 6542, 0.9816], [112, 6814, 0.982], [116, 7047, 0.9818], [120, 7271, 0.9824], [124, 7493, 0.984], [128, 7741, 0.9842], [132, 7944, 0.9838], [136, 8153, 0.9842], [140, 8346, 0.9832], [144, 8575, 0.985], [148, 8825, 0.9852], [152, 9021, 0.9842], [156, 9256, 0.9838], [160, 9467, 0.984], [164, 9699, 0.9838], [168, 9967, 0.9842], [172, 10232, 0.9846], [176, 10487, 0.9842], [180, 10691, 0.985], [184, 10946, 0.9842], [188, 11192, 0.9838], [192, 11435, 0.9842], [196, 11656, 0.9834], [200, 11842, 0.9844], [204, 12099, 0.9844], [208, 12325, 0.9838], [212, 12591, 0.9848], [216, 12857, 0.9838], [220, 13099, 0.9844], [224, 13460, 0.9854], [228, 13937, 0.9852], [232, 14894, 0.9844]]
        prim(self.test_losses_async_idd_4)
        prim(self.test_accuracies_async_idd_4)

        self.test_losses_async_noidd_4 = [[4, 6055, 0.8723707138061524], [8, 6294, 0.4385860688686371], [12, 6488, 0.3132139161229134], [16, 6701, 0.24509382181167602], [20, 6900, 0.19359985938221216], [24, 7128, 0.15142231247350574], [28, 7332, 0.1334101695895195], [32, 7576, 0.14823115291297437], [36, 7787, 0.13343086956739425], [40, 7999, 0.10380975190419704], [44, 8206, 0.09832306678891183], [48, 8395, 0.10790721675977111], [52, 8632, 0.10151996064251288], [56, 8811, 0.08927985657621175], [60, 9043, 0.08970297290626914], [64, 9267, 0.0859049031068571], [68, 9483, 0.08521851797895506], [72, 9703, 0.0899891023946926], [76, 9946, 0.08400253438279033], [80, 10199, 0.07937330199824646], [84, 10376, 0.082631061814446], [88, 10609, 0.07839261978659778], [92, 10815, 0.08226244576703758], [96, 11007, 0.07471292291549034], [100, 11265, 0.07521793539319187], [104, 11498, 0.07206807532715612], [108, 11739, 0.07689327694224193], [112, 11922, 0.07328453484745696], [116, 12173, 0.0769741311721038], [120, 12412, 0.0739954643382458], [124, 12646, 0.07175124884270481], [128, 12877, 0.06937992875366472], [132, 13112, 0.06966756362229352], [136, 13355, 0.06639258463901933], [140, 13632, 0.07251706645190716], [144, 13859, 0.0717489175068913], [148, 14081, 0.06763879828182981], [152, 14324, 0.06942662536791759], [156, 14577, 0.06865737499570823], [160, 14807, 0.07079867733443389], [164, 15038, 0.06982723202315393], [168, 15248, 0.0673885735357122], [172, 15467, 0.06934393997279695], [176, 15687, 0.06804142442420708], [180, 15936, 0.07371769832763093], [184, 16187, 0.07559277911005484], [188, 16393, 0.06829614092041739], [192, 16667, 0.06708139780830534], [196, 16867, 0.07003846096917404], [200, 17129, 0.06859307392128976], [204, 17375, 0.06802673540674732], [208, 17565, 0.0674067983605899], [212, 17777, 0.06935541424277471], [216, 18038, 0.06972783402897693], [220, 18298, 0.07042573108428406], [224, 18705, 0.07182687584825725], [228, 19587, 0.0873023387653644], [232, 20595, 0.1038522119712241]]
        self.test_accuracies_async_noidd_4 = [[4, 6055, 0.8318], [8, 6294, 0.8622], [12, 6488, 0.8964], [16, 6701, 0.9234], [20, 6900, 0.9388], [24, 7128, 0.9546], [28, 7332, 0.9574], [32, 7576, 0.9534], [36, 7787, 0.9592], [40, 7999, 0.9698], [44, 8206, 0.9712], [48, 8395, 0.9704], [52, 8632, 0.9708], [56, 8811, 0.9726], [60, 9043, 0.9734], [64, 9267, 0.975], [68, 9483, 0.9756], [72, 9703, 0.9724], [76, 9946, 0.9766], [80, 10199, 0.9774], [84, 10376, 0.9752], [88, 10609, 0.9758], [92, 10815, 0.9768], [96, 11007, 0.9782], [100, 11265, 0.978], [104, 11498, 0.9774], [108, 11739, 0.9782], [112, 11922, 0.9798], [116, 12173, 0.9796], [120, 12412, 0.9784], [124, 12646, 0.9798], [128, 12877, 0.9814], [132, 13112, 0.982], [136, 13355, 0.9818], [140, 13632, 0.9792], [144, 13859, 0.9806], [148, 14081, 0.981], [152, 14324, 0.9814], [156, 14577, 0.9818], [160, 14807, 0.9814], [164, 15038, 0.9816], [168, 15248, 0.9812], [172, 15467, 0.9816], [176, 15687, 0.9816], [180, 15936, 0.9812], [184, 16187, 0.9818], [188, 16393, 0.9826], [192, 16667, 0.983], [196, 16867, 0.9832], [200, 17129, 0.9826], [204, 17375, 0.9834], [208, 17565, 0.9834], [212, 17777, 0.9828], [216, 18038, 0.9812], [220, 18298, 0.9834], [224, 18705, 0.9834], [228, 19587, 0.978], [232, 20595, 0.975]]
        prim(self.test_losses_async_noidd_4)
        prim(self.test_accuracies_async_noidd_4)

        self.test_losses_sync_idd_4 = [[0, 993, 0.24614560146331788], [4, 1239, 0.14568912756443023], [8, 1511, 0.107203280082345], [12, 1745, 0.0926571164995432], [16, 1992, 0.08483188674598932], [20, 2215, 0.07430696124732494], [24, 2438, 0.0721861315563321], [28, 2676, 0.06629617865011096], [32, 2899, 0.06309416807964444], [36, 3160, 0.06044444513469934], [40, 3386, 0.060111266159266236], [44, 3616, 0.054897045841254294], [48, 3861, 0.05153558036759496], [52, 4074, 0.05061159776225686], [56, 4319, 0.0517902426302433], [60, 4564, 0.04946868431097828], [64, 4812, 0.04949766047615558], [68, 5067, 0.04663715899735689], [72, 5320, 0.047870390308182686], [76, 5583, 0.04760158291500993], [80, 5860, 0.04658553469670005], [84, 6136, 0.047870550044067206], [88, 6416, 0.04614688818755094]]
        self.test_accuracies_sync_idd_4 = [[0, 993, 0.9308], [4, 1239, 0.953], [8, 1511, 0.9644], [12, 1745, 0.9692], [16, 1992, 0.9726], [20, 2215, 0.9746], [24, 2438, 0.975], [28, 2676, 0.98], [32, 2899, 0.9794], [36, 3160, 0.981], [40, 3386, 0.9798], [44, 3616, 0.9824], [48, 3861, 0.9842], [52, 4074, 0.9842], [56, 4319, 0.984], [60, 4564, 0.9844], [64, 4812, 0.985], [68, 5067, 0.9848], [72, 5320, 0.9848], [76, 5583, 0.9864], [80, 5860, 0.9864], [84, 6136, 0.986], [88, 6416, 0.9862]]
        prim(self.test_losses_sync_idd_4)
        prim(self.test_accuracies_sync_idd_4)

        self.test_losses_sync_noidd_4 = []
        self.test_accuracies_sync_noidd_4 = []
        
        self.test_losses_async_idd_6 = []
        self.test_accuracies_async_idd_6 = []

        self.test_losses_async_noidd_6 = []
        self.test_accuracies_async_noidd_6 = []

        self.test_losses_sync_idd_6 = []
        self.test_accuracies_sync_idd_6 = []

        self.test_losses_sync_noidd_6 = []
        self.test_accuracies_sync_noidd_6 = []


    def get_stats(self): # 返回 一个字典 各个域存储 当前训练集和验证集上的结果
        return {
            "test_loss_async_idd_1" : self.test_losses_async_idd_1,
            "test_accuracy_async_idd_1" : self.test_accuracies_async_idd_1,
            "test_loss_async_idd_2" : self.test_losses_async_idd_2,
            "test_accuracy_async_idd_2" : self.test_accuracies_async_idd_2,
            "test_loss_sync_idd_2" : self.test_losses_sync_idd_2,
            "test_accuracy_sync_idd_2" : self.test_accuracies_sync_idd_2,

            "test_loss_async_idd_4" : self.test_losses_async_idd_4,
            "test_accuracy_async_idd_4" : self.test_accuracies_async_idd_4,

            "test_loss_async_noidd_4" : self.test_losses_async_noidd_4,
            "test_accuracy_async_noidd_4" : self.test_accuracies_async_noidd_4,

            "test_loss_sync_idd_4" : self.test_losses_sync_idd_4,
            "test_accuracy_sync_idd_4" : self.test_accuracies_sync_idd_4,

            "test_loss_sync_noidd_4" : self.test_losses_sync_noidd_4,
            "test_accuracy_sync_noidd_4" : self.test_accuracies_sync_noidd_4,

            "test_loss_async_idd_6" : self.test_losses_async_idd_6,
            "test_accuracy_async_idd_6" : self.test_accuracies_async_idd_6,

            "test_loss_async_noidd_6" : self.test_losses_async_noidd_6,
            "test_accuracy_async_noidd_6" : self.test_accuracies_async_noidd_6,

            "test_loss_sync_idd_6" : self.test_losses_sync_idd_6,
            "test_accuracy_sync_idd_6" : self.test_accuracies_sync_idd_6,

            "test_loss_sync_noidd_6" : self.test_losses_sync_noidd_6,
            "test_accuracy_sync_noidd_6" : self.test_accuracies_sync_noidd_6
        }
        
        
######## Flask server with Socket IO ########

# Federated Averaging algorithm with the server pulling from clients

class FLServer(object):  # 服务端

    def __init__(self, global_model, host, port, datasource): # 初始化

        self.global_model = global_model() # 加载全局模型 MINIST_CNN

        self.app = Flask(__name__) # 搭建 
        self.socketio = SocketIO(self.app)
        self.host = host # ip地址
        self.port = port # 端口

        # UUID 是 通用唯一识别码（Universally Unique Identifier）的缩写
        # 其目的，是让分布式系统中的所有元素，都能有唯一的辨识信息，而不需要通过中央控制端来做辨识信息的指定。
        self.model_id = str(uuid.uuid4()) # 申请一个独立 的uuid

        @self.app.route('/') # 一些网页可视化
        def dashboard():
            return render_template('plaint.html')

        @self.app.route('/stats') # 一些网页可视化
        def status_page(): # 返回当前全局模型的
            return json.dumps(self.global_model.get_stats()) # 当前训练集和验证集上的结果

    def start(self): # 运行
        self.socketio.run(self.app, host=self.host, port=self.port)

if __name__ == '__main__':
    # When the application is in debug mode the Werkzeug development server is still used
    # and configured properly inside socketio.run(). In production mode the eventlet web server
    # is used if available, else the gevent web server is used.
    
    server_host = "127.0.0.1"
    server_port = 5000

    server = FLServer(GlobalModel, server_host, server_port, datasource.Mnist) # 服务端
    print("listening on %s:%d"%(server_host, server_port))
    server.start()
